<%
/*
 *   DJANG10 - core mapper
 *   Invokes the projects url file
  * first, get the url patterns from the project "urls" file
  *
  *  each URL pattern is an array of [ regex, fn] where
  *
  *  fn = <site>.<app>.<filename>.<functionname>
  */

core.djang10.http();

urlpatterns = djang10.invokeSandboxPackage([ core.djang10.conf.urls.defaults ], jxp.urls, "urlpatterns");

// now go through each pattern and see if it matches

invoker = null;
match_array = null;
for (p in urlpatterns) {

    match_array = request.getURI().match(urlpatterns[p][0]);
    if (match_array != null) {
       invoker = urlpatterns[p][1];
       break;
    }
}

// if we don't have an invoker,do whatever show a framework error page
// @TODO - figure out what django really does

if (invoker == null) {
    core.djang10.conf.errorPage("No invoker specified for " + request.getURI());
}
else {

    // extract the package name (really the <app>.<file> section - ignore the leading <project>
    // and get the function to call in that package as well

    pkg = "jxp" + invoker.substring(invoker.indexOf("."), invoker.lastIndexOf("."));
    func = invoker.substring(invoker.lastIndexOf(".")+1);

    // now  invoke the function in the package in a private global scope.  We can shove the
    // request object as the first arg, just replacing the full match string that's there
    // rather than waste the time of getting a new arg array

    match_array[0] = new HttpRequest(request);
    
    httpresp = djang10.invokeSandboxFunction([], pkg, func, match_array);

    print(httpresp.getContent());
}
%>